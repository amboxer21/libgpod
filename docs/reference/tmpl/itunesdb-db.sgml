<!-- ##### SECTION Title ##### -->
iPod database reading/writing

<!-- ##### SECTION Short_Description ##### -->
Functions to read, write, and create an iPod database

<!-- ##### SECTION Long_Description ##### -->
<para>
These functions are for reading, writing, creating, and deleting an iPod
database and getting the total number of tracks and playlists.
</para>
<para>
Overview of using an iPod database:
</para>
<para>
itdb_parse(): read the iTunesDB and ArtworkDB
</para>
<para>
itdb_write(): write the iTunesDB and ArtworkDB
</para>
<para>
itdb_parse() will return a #Itdb_iTunesDB structure with GLists
containing all tracks the playlists in the database.  Each track is
represented by an #Itdb_Track.   Each playlist is represented by an
#Itdb_Playlist.  See the <link linkend="libgpod-Tracks">Tracks</link>
and <link linkend="libgpod-Playlists">Playlists</link> sections for
details on tracks and playlists, respectively.
</para>
<para>
Each #Itdb_Playlist has a GList called @members which contains all of
the tracks in the playlist.  Tracks referenced in a playlist must also
be present in the @tracks GList of the #Itdb_iTunesDB.
</para>
<para>
The iPod must contain one master playlist (MPL) containing all tracks
accessible on the iPod through the Music->Tracks/Albums/Artists/etc.
menu.  In addition to the MPL there can be a number of normal
playlists accessible through the Music->Playlists menu on the iPod.
Tracks that are a member of one of these normal playlists must also be
a member of the MPL.
</para>
<para>
The Podcasts playlist is just another playlist with some internal
flags set differently.  Tracks in the Podcasts playlist are not
normally members of the MPL (so on the iPod they will only show up
under the Podcasts menu). All tracks referenced must be in the
@tracks GList of the #Itdb_iTunesDB, however.
</para>
<para>
Each track may have a thumbnail associated with it. You can retrieve a
#GdkPixmap of the thumbnail using itdb_artwork_get_pixbuf().  A
thumbnail can be added with itdb_track_set_thumbnails().  A thumbnail
can be removed with itdb_track_remove_thumbnails().  Please see the
<link linkend="libgpod-Artwork">Artwork</link> section for more
details on artwork related functions and structures.
</para>
<note>
<para>
Be aware that iTunes additionally stores the artwork as tags
in the original music file. That's also from where the data is
read when artwork is displayed in iTunes, and there can be more
than one piece of artwork. libgpod does not store the artwork as
tags in the original music file. As a consequence, if iTunes
attempts to access the artwork, it will find none, and remove
libgpod's artwork. Luckily, iTunes will only attempt to access
the artwork if you select a track in iTunes.  To work around
this, gtkpod keeps a list of the original filename of all
artwork and silently adds the thumbnails if they were 'lost'.
Your application might want to do something similar, or you can
supply patches for (optionally!) adding tags to the original music
files.
</para>
</note>
<para>
The #Itdb_iTunesDB, #Itdb_Playlist and #Itdb_Track structures each
have @userdata and @usertype fields that can be used by the
application to store additional application-specific data. If
@userdata is a pointer to an external structure, you can supply a
#ItdbUserDataDuplicateFunc and a #ItdbUserDataDestroyFunc so that this
data can be duplicated or freed automatically with a call to the
library _duplicate()/_free() functions.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### STRUCT Itdb_iTunesDB ##### -->
<para>

</para>

@tracks: 
@playlists: 
@filename: 
@device: 
@version: 
@id: 
@tzoffset: 
@reserved_int2: 
@priv: 
@reserved2: 
@usertype: 
@userdata: 
@userdata_duplicate: 
@userdata_destroy: 

<!-- ##### STRUCT Itdb_iTunesDB_Private ##### -->
<para>

</para>

@mhsd5_playlists: 
@unk_0x22: 
@id_0x24: 
@lang: 
@pid: 
@unk_0x50: 
@unk_0x54: 
@audio_language: 
@subtitle_language: 
@unk_0xa4: 
@unk_0xa6: 
@unk_0xa8: 

<!-- ##### ENUM ItdbFileError ##### -->
<para>

</para>

@ITDB_FILE_ERROR_SEEK: 
@ITDB_FILE_ERROR_CORRUPT: 
@ITDB_FILE_ERROR_NOTFOUND: 
@ITDB_FILE_ERROR_RENAME: 
@ITDB_FILE_ERROR_ITDB_CORRUPT: 

<!-- ##### FUNCTION itdb_new ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION itdb_free ##### -->
<para>

</para>

@itdb: 


<!-- ##### FUNCTION itdb_parse ##### -->
<para>

</para>

@mp: 
@error: 
@Returns: 


<!-- ##### FUNCTION itdb_write ##### -->
<para>

</para>

@itdb: 
@error: 
@Returns: 


<!-- ##### FUNCTION itdb_set_mountpoint ##### -->
<para>

</para>

@itdb: 
@mp: 


<!-- ##### FUNCTION itdb_get_mountpoint ##### -->
<para>

</para>

@itdb: 
@Returns: 


<!-- ##### FUNCTION itdb_init_ipod ##### -->
<para>

</para>

@mountpoint: 
@model_number: 
@ipod_name: 
@error: 
@Returns: 


<!-- ##### FUNCTION itdb_tracks_number ##### -->
<para>

</para>

@itdb: 
@Returns: 


<!-- ##### FUNCTION itdb_tracks_number_nontransferred ##### -->
<para>

</para>

@itdb: 
@Returns: 


<!-- ##### FUNCTION itdb_playlists_number ##### -->
<para>

</para>

@itdb: 
@Returns: 


<!-- ##### USER_FUNCTION ItdbUserDataDestroyFunc ##### -->
<para>

</para>

@userdata: 


<!-- ##### USER_FUNCTION ItdbUserDataDuplicateFunc ##### -->
<para>

</para>

@userdata: 
@Returns: 


